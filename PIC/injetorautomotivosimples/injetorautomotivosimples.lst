;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 12/12/2017 20:06:07
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF000EFA9  	GOTO        338
0x0004	0x0000      	NOP
0x0006	0x0000      	NOP
0x0008	0xF000EF00  	GOTO        0
0x000C	0x0000      	NOP
0x000E	0x0000      	NOP
0x0010	0x0000      	NOP
0x0012	0x0000      	NOP
0x0014	0x0000      	NOP
0x0016	0x0000      	NOP
0x0018	0xD7F3      	BRA         0
_baseTime:
;injetorautomotivosimples.c,74 :: 		void baseTime() {
;injetorautomotivosimples.c,76 :: 		if(baseT1 == 2) {
0x001C	0x0E00      	MOVLW       0
0x001E	0x1816      	XORWF       _baseT1+1, 0 
0x0020	0xE102      	BNZ         L__baseTime27
0x0022	0x0E02      	MOVLW       2
0x0024	0x1815      	XORWF       _baseT1, 0 
L__baseTime27:
0x0026	0xE103      	BNZ         L_baseTime3
;injetorautomotivosimples.c,77 :: 		baseT1 = 0;
0x0028	0x6A15      	CLRF        _baseT1 
0x002A	0x6A16      	CLRF        _baseT1+1 
;injetorautomotivosimples.c,78 :: 		output01 = ~output01;
0x002C	0x708A      	BTG         LATB0_bit, 0 
;injetorautomotivosimples.c,79 :: 		}
L_baseTime3:
;injetorautomotivosimples.c,81 :: 		if(baseT2 == 10) {
0x002E	0x0E00      	MOVLW       0
0x0030	0x1818      	XORWF       _baseT2+1, 0 
0x0032	0xE102      	BNZ         L__baseTime28
0x0034	0x0E0A      	MOVLW       10
0x0036	0x1817      	XORWF       _baseT2, 0 
L__baseTime28:
0x0038	0xE103      	BNZ         L_baseTime4
;injetorautomotivosimples.c,82 :: 		baseT2 = 0;
0x003A	0x6A17      	CLRF        _baseT2 
0x003C	0x6A18      	CLRF        _baseT2+1 
;injetorautomotivosimples.c,83 :: 		output02 = ~output02;
0x003E	0x728A      	BTG         LATB1_bit, 1 
;injetorautomotivosimples.c,84 :: 		}
L_baseTime4:
;injetorautomotivosimples.c,85 :: 		}
L_end_baseTime:
0x0040	0x0012      	RETURN      0
; end of _baseTime
_checkT1:
;injetorautomotivosimples.c,87 :: 		void checkT1() {
;injetorautomotivosimples.c,88 :: 		if(TMR1IF_bit) {
0x0042	0xA09E      	BTFSS       TMR1IF_bit, 0 
0x0044	0xD01C      	BRA         L_checkT15
;injetorautomotivosimples.c,89 :: 		TMR1IF_bit = 0x00;
0x0046	0x909E      	BCF         TMR1IF_bit, 0 
;injetorautomotivosimples.c,90 :: 		TMR1H = 0x3C;
0x0048	0x0E3C      	MOVLW       60
0x004A	0x6ECF      	MOVWF       TMR1H 
;injetorautomotivosimples.c,91 :: 		TMR1L = 0xB0;
0x004C	0x0EB0      	MOVLW       176
0x004E	0x6ECE      	MOVWF       TMR1L 
;injetorautomotivosimples.c,92 :: 		baseTMR01++;
0x0050	0x4A19      	INFSNZ      _baseTMR01, 1 
0x0052	0x2A1A      	INCF        _baseTMR01+1, 1 
;injetorautomotivosimples.c,93 :: 		if(baseTMR01 == 10) {
0x0054	0x0E00      	MOVLW       0
0x0056	0x181A      	XORWF       _baseTMR01+1, 0 
0x0058	0xE102      	BNZ         L__checkT130
0x005A	0x0E0A      	MOVLW       10
0x005C	0x1819      	XORWF       _baseTMR01, 0 
L__checkT130:
0x005E	0xE10F      	BNZ         L_checkT16
;injetorautomotivosimples.c,94 :: 		baseTMR01 = 0;
0x0060	0x6A19      	CLRF        _baseTMR01 
0x0062	0x6A1A      	CLRF        _baseTMR01+1 
;injetorautomotivosimples.c,95 :: 		motorControl++;
0x0064	0x4A1B      	INFSNZ      _motorControl, 1 
0x0066	0x2A1C      	INCF        _motorControl+1, 1 
;injetorautomotivosimples.c,96 :: 		if(motorControl == 5) {
0x0068	0x0E00      	MOVLW       0
0x006A	0x181C      	XORWF       _motorControl+1, 0 
0x006C	0xE102      	BNZ         L__checkT131
0x006E	0x0E05      	MOVLW       5
0x0070	0x181B      	XORWF       _motorControl, 0 
L__checkT131:
0x0072	0xE105      	BNZ         L_checkT17
;injetorautomotivosimples.c,97 :: 		motorControl = 6;
0x0074	0x0E06      	MOVLW       6
0x0076	0x6E1B      	MOVWF       _motorControl 
0x0078	0x0E00      	MOVLW       0
0x007A	0x6E1C      	MOVWF       _motorControl+1 
;injetorautomotivosimples.c,98 :: 		motor = 0x00;
0x007C	0x968A      	BCF         LATB3_bit, 3 
;injetorautomotivosimples.c,99 :: 		}
L_checkT17:
;injetorautomotivosimples.c,100 :: 		}
L_checkT16:
;injetorautomotivosimples.c,101 :: 		}
L_checkT15:
;injetorautomotivosimples.c,102 :: 		}
L_end_checkT1:
0x007E	0x0012      	RETURN      0
; end of _checkT1
_checkT2:
;injetorautomotivosimples.c,105 :: 		void checkT2() {
;injetorautomotivosimples.c,106 :: 		if(TMR2IF_bit) {
0x0080	0xA29E      	BTFSS       TMR2IF_bit, 1 
0x0082	0xD02E      	BRA         L_checkT28
;injetorautomotivosimples.c,107 :: 		TMR2IF_bit = 0x00;
0x0084	0x929E      	BCF         TMR2IF_bit, 1 
;injetorautomotivosimples.c,108 :: 		incRpm01++;
0x0086	0x2A1F      	INCF        _incRpm01, 1 
;injetorautomotivosimples.c,109 :: 		incRpm02++;
0x0088	0x2A20      	INCF        _incRpm02, 1 
;injetorautomotivosimples.c,110 :: 		incRpm03++;
0x008A	0x2A1D      	INCF        _incRpm03, 1 
;injetorautomotivosimples.c,113 :: 		if(incRpm01 < 116) rpm01Output = ~rpm01Output;
0x008C	0x0E80      	MOVLW       128
0x008E	0x181F      	XORWF       _incRpm01, 0 
0x0090	0x6E00      	MOVWF       R0 
0x0092	0x0E80      	MOVLW       128
0x0094	0x0A74      	XORLW       116
0x0096	0x5C00      	SUBWF       R0, 0 
0x0098	0xE202      	BC          L_checkT29
0x009A	0x788A      	BTG         LATB4_bit, 4 
0x009C	0xD001      	BRA         L_checkT210
L_checkT29:
;injetorautomotivosimples.c,114 :: 		else rpm01Output = 0x00;
0x009E	0x988A      	BCF         LATB4_bit, 4 
L_checkT210:
;injetorautomotivosimples.c,115 :: 		if(incRpm01 == 120) incRpm01 = 0;
0x00A0	0x501F      	MOVF        _incRpm01, 0 
0x00A2	0x0A78      	XORLW       120
0x00A4	0xB4D8      	BTFSC       STATUS, 2 
0x00A6	0x6A1F      	CLRF        _incRpm01 
L_checkT211:
;injetorautomotivosimples.c,118 :: 		if(incRpm02 < 70) rpm02Output = ~rpm02Output;
0x00A8	0x0E80      	MOVLW       128
0x00AA	0x1820      	XORWF       _incRpm02, 0 
0x00AC	0x6E00      	MOVWF       R0 
0x00AE	0x0E80      	MOVLW       128
0x00B0	0x0A46      	XORLW       70
0x00B2	0x5C00      	SUBWF       R0, 0 
0x00B4	0xE202      	BC          L_checkT212
0x00B6	0x7C8A      	BTG         LATB6_bit, 6 
0x00B8	0xD001      	BRA         L_checkT213
L_checkT212:
;injetorautomotivosimples.c,119 :: 		else rpm02Output = 0x00;
0x00BA	0x9C8A      	BCF         LATB6_bit, 6 
L_checkT213:
;injetorautomotivosimples.c,120 :: 		if(incRpm02 == 72) incRpm02 = 0;
0x00BC	0x5020      	MOVF        _incRpm02, 0 
0x00BE	0x0A48      	XORLW       72
0x00C0	0xB4D8      	BTFSC       STATUS, 2 
0x00C2	0x6A20      	CLRF        _incRpm02 
L_checkT214:
;injetorautomotivosimples.c,123 :: 		if(incRpm03 < 14) rpm03Output = ~rpm03Output;
0x00C4	0x0E80      	MOVLW       128
0x00C6	0x181D      	XORWF       _incRpm03, 0 
0x00C8	0x6E00      	MOVWF       R0 
0x00CA	0x0E80      	MOVLW       128
0x00CC	0x0A0E      	XORLW       14
0x00CE	0x5C00      	SUBWF       R0, 0 
0x00D0	0xE202      	BC          L_checkT215
0x00D2	0x7E8A      	BTG         LATB7_bit, 7 
0x00D4	0xD001      	BRA         L_checkT216
L_checkT215:
;injetorautomotivosimples.c,124 :: 		else rpm03Output = 0x00;
0x00D6	0x9E8A      	BCF         LATB7_bit, 7 
L_checkT216:
;injetorautomotivosimples.c,125 :: 		if(incRpm03 == 16) incRpm03 = 0;
0x00D8	0x501D      	MOVF        _incRpm03, 0 
0x00DA	0x0A10      	XORLW       16
0x00DC	0xB4D8      	BTFSC       STATUS, 2 
0x00DE	0x6A1D      	CLRF        _incRpm03 
L_checkT217:
;injetorautomotivosimples.c,127 :: 		}
L_checkT28:
;injetorautomotivosimples.c,128 :: 		}
L_end_checkT2:
0x00E0	0x0012      	RETURN      0
; end of _checkT2
_readButton:
;injetorautomotivosimples.c,131 :: 		void readButton() {
;injetorautomotivosimples.c,132 :: 		if(!button) flagButton = 0x01;
0x00E2	0xAA81      	BTFSS       RB5_bit, 5 
0x00E4	0x8021      	BSF         _flagButton, BitPos(_flagButton+0) 
L_readButton18:
;injetorautomotivosimples.c,133 :: 		if(button && flagButton) {
0x00E6	0xAA81      	BTFSS       RB5_bit, 5 
0x00E8	0xD006      	BRA         L_readButton21
0x00EA	0xA021      	BTFSS       _flagButton, BitPos(_flagButton+0) 
0x00EC	0xD004      	BRA         L_readButton21
L__readButton22:
;injetorautomotivosimples.c,134 :: 		flagButton = 0x00;
0x00EE	0x9021      	BCF         _flagButton, BitPos(_flagButton+0) 
;injetorautomotivosimples.c,135 :: 		motor = 0x01;
0x00F0	0x868A      	BSF         LATB3_bit, 3 
;injetorautomotivosimples.c,136 :: 		motorControl = 0x00;
0x00F2	0x6A1B      	CLRF        _motorControl 
0x00F4	0x6A1C      	CLRF        _motorControl+1 
;injetorautomotivosimples.c,137 :: 		}
L_readButton21:
;injetorautomotivosimples.c,138 :: 		}
L_end_readButton:
0x00F6	0x0012      	RETURN      0
; end of _readButton
_configureMcu:
;injetorautomotivosimples.c,47 :: 		void configureMcu() {
;injetorautomotivosimples.c,48 :: 		ADCON1 = 0x01; // Todas IOs digitais
0x00F8	0x0E01      	MOVLW       1
0x00FA	0x6EC1      	MOVWF       ADCON1 
;injetorautomotivosimples.c,49 :: 		TRISB = 0x24;  //Configura PortB definindo entradas e saídas
0x00FC	0x0E24      	MOVLW       36
0x00FE	0x6E93      	MOVWF       TRISB 
;injetorautomotivosimples.c,50 :: 		LATB = 0xE4;  //Inicializa o LATB
0x0100	0x0EE4      	MOVLW       228
0x0102	0x6E8A      	MOVWF       LATB 
;injetorautomotivosimples.c,51 :: 		TMR0H = 0x3C;   // Carrega registradores com valor 15536
0x0104	0x0E3C      	MOVLW       60
0x0106	0x6ED7      	MOVWF       TMR0H 
;injetorautomotivosimples.c,52 :: 		TMR0L = 0xB0;
0x0108	0x0EB0      	MOVLW       176
0x010A	0x6ED6      	MOVWF       TMR0L 
;injetorautomotivosimples.c,53 :: 		T0CON = 0x82; // Timer 0,  16 bits, prescaler 1:8
0x010C	0x0E82      	MOVLW       130
0x010E	0x6ED5      	MOVWF       T0CON 
;injetorautomotivosimples.c,54 :: 		TMR1H = 0x3C;  // Carrega registradores com valor 15536
0x0110	0x0E3C      	MOVLW       60
0x0112	0x6ECF      	MOVWF       TMR1H 
;injetorautomotivosimples.c,55 :: 		TMR1L = 0xB0;
0x0114	0x0EB0      	MOVLW       176
0x0116	0x6ECE      	MOVWF       TMR1L 
;injetorautomotivosimples.c,56 :: 		T1CON = 0xF1; // Timer 1,  16 bits, prescaler 1:8
0x0118	0x0EF1      	MOVLW       241
0x011A	0x6ECD      	MOVWF       T1CON 
;injetorautomotivosimples.c,57 :: 		T2CON = 0x7C; // Timer 2, 8 bits, postscaler 1:16
0x011C	0x0E7C      	MOVLW       124
0x011E	0x6ECA      	MOVWF       T2CON 
;injetorautomotivosimples.c,58 :: 		PR2 = pr2Load; // Carrega em PR2 valor de pr2Load
0x0120	0xFFCBC01E  	MOVFF       _pr2Load, PR2
;injetorautomotivosimples.c,59 :: 		flagButton = 0x00;
0x0124	0x9021      	BCF         _flagButton, BitPos(_flagButton+0) 
;injetorautomotivosimples.c,60 :: 		}
L_end_configureMcu:
0x0126	0x0012      	RETURN      0
; end of _configureMcu
___CC2DW:
;__Lib_System.c,21 :: 		
;__Lib_System.c,23 :: 		
_CC2DL_Loop1:
;__Lib_System.c,24 :: 		
0x0128	0x0009      	TBLRD*+
;__Lib_System.c,25 :: 		
0x012A	0xFFE6CFF5  	MOVFF       TABLAT, POSTINC1
;__Lib_System.c,26 :: 		
0x012E	0x0600      	DECF        R0, 1, 0
;__Lib_System.c,27 :: 		
0x0130	0xE1FB      	BNZ         _CC2DL_Loop1
;__Lib_System.c,28 :: 		
0x0132	0x0601      	DECF        R1, 1, 0
;__Lib_System.c,29 :: 		
0x0134	0xE1F9      	BNZ         _CC2DL_Loop1
;__Lib_System.c,31 :: 		
L_end___CC2DW:
0x0136	0x0012      	RETURN      0
; end of ___CC2DW
_checkT0:
;injetorautomotivosimples.c,62 :: 		void checkT0() {
;injetorautomotivosimples.c,63 :: 		if(TMR0IF_bit) {
0x0138	0xA4F2      	BTFSS       TMR0IF_bit, 2 
0x013A	0xD00A      	BRA         L_checkT02
;injetorautomotivosimples.c,64 :: 		TMR0IF_bit = 0x00;
0x013C	0x94F2      	BCF         TMR0IF_bit, 2 
;injetorautomotivosimples.c,65 :: 		TMR0H = 0x3C;
0x013E	0x0E3C      	MOVLW       60
0x0140	0x6ED7      	MOVWF       TMR0H 
;injetorautomotivosimples.c,66 :: 		TMR0L = 0xB0;
0x0142	0x0EB0      	MOVLW       176
0x0144	0x6ED6      	MOVWF       TMR0L 
;injetorautomotivosimples.c,67 :: 		baseT1++;
0x0146	0x4A15      	INFSNZ      _baseT1, 1 
0x0148	0x2A16      	INCF        _baseT1+1, 1 
;injetorautomotivosimples.c,68 :: 		baseT2++;
0x014A	0x4A17      	INFSNZ      _baseT2, 1 
0x014C	0x2A18      	INCF        _baseT2+1, 1 
;injetorautomotivosimples.c,70 :: 		baseTime();
0x014E	0xDF66      	RCALL       _baseTime
;injetorautomotivosimples.c,71 :: 		}
L_checkT02:
;injetorautomotivosimples.c,72 :: 		}
L_end_checkT0:
0x0150	0x0012      	RETURN      0
; end of _checkT0
_main:
0x0152	0x6A15      	CLRF        _baseT1 
0x0154	0x6A16      	CLRF        22 
0x0156	0x6A17      	CLRF        _baseT2 
0x0158	0x6A18      	CLRF        24 
0x015A	0x6A19      	CLRF        _baseTMR01 
0x015C	0x6A1A      	CLRF        26 
0x015E	0x0E06      	MOVLW       6
0x0160	0x6E1B      	MOVWF       _motorControl 
0x0162	0x6A1C      	CLRF        28 
0x0164	0x6A1D      	CLRF        _incRpm03 
0x0166	0x0E7D      	MOVLW       125
0x0168	0x6E1E      	MOVWF       _pr2Load 
0x016A	0x6A1F      	CLRF        _incRpm01 
0x016C	0x6A20      	CLRF        _incRpm02 
;injetorautomotivosimples.c,35 :: 		void main() {
;injetorautomotivosimples.c,36 :: 		configureMcu();
0x016E	0xDFC4      	RCALL       _configureMcu
;injetorautomotivosimples.c,37 :: 		while(1) {
L_main0:
;injetorautomotivosimples.c,38 :: 		checkT0();
0x0170	0xDFE3      	RCALL       _checkT0
;injetorautomotivosimples.c,39 :: 		checkT1();
0x0172	0xDF67      	RCALL       _checkT1
;injetorautomotivosimples.c,40 :: 		checkT2();
0x0174	0xDF85      	RCALL       _checkT2
;injetorautomotivosimples.c,41 :: 		readButton();
0x0176	0xDFB5      	RCALL       _readButton
;injetorautomotivosimples.c,42 :: 		}
0x0178	0xD7FB      	BRA         L_main0
;injetorautomotivosimples.c,43 :: 		}
L_end_main:
0x017A	0xD7FF      	BRA         $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x001C      [38]    _baseTime
0x0042      [62]    _checkT1
0x0080      [98]    _checkT2
0x00E2      [22]    _readButton
0x00F8      [48]    _configureMcu
0x0128      [16]    ___CC2DW
0x0138      [26]    _checkT0
0x0152      [42]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    R0
0x0000       [1]    FLASH_Erase_64_SaveINTCON_L0
0x0000       [1]    __Lib_SoftI2C_PutZerosToLATScl_temp_scl_L0
0x0000       [1]    UART1_Init_tmp_L0
0x0000       [1]    EEPROM_Write_SaveINTCON_L0
0x0000       [1]    __Lib_SoftI2C_PutZerosToLATSda_temp_sda_L0
0x0000       [1]    SPI1_Write_tmp_L0
0x0001       [1]    FLASH_Write_32_i_L0
0x0001       [1]    UART1_Read___tmp_UART1_Read_L0
0x0001       [1]    __Lib_TFT_JPEG_FileRead_i_L0
0x0001       [1]    __Lib_TFT_16bit_JPEG_FileRead_i_L0
0x0001       [1]    __Lib_PS2_Wait_Falling_nsample_L0
0x0001       [1]    R1
0x0001       [1]    FLASH_Erase_Write_64_i_L0
0x0001       [1]    ispunct_rslt_L0
0x0001       [1]    __Lib_TFT_JPEG_FileReadBytes_Result_L0
0x0001       [1]    __Lib_TFT_16bit_JPEG_FileReadBytes_Result_L0
0x0001       [2]    FLASH_Read_N_Bytes_i_L0
0x0001       [1]    I2C1_Rd_tmp_L0
0x0002       [2]    strlen_cp_L0
0x0002       [2]    memset_pp_L0
0x0002       [2]    memchr_s_L0
0x0002       [2]    memcpy_dd_L0
0x0002       [1]    R2
0x0002       [1]    __Lib_USB_genHID_USB_CtrlTrf_Rx_Service_byteToRead_L0
0x0002       [1]    FLASH_Write_32_SaveINTCON_L0
0x0002       [2]    __Lib_USB_genHID_memset_usb_pp_L0
0x0002       [2]    __Lib_USB_genHID_memset_usb_int_pp_L0
0x0002       [1]    FLASH_Erase_Write_64_j_L0
0x0003       [2]    Ltrim_original_L0
0x0003       [1]    __Lib_USB_genHID_USB_CtrlTrf_Rx_Service_i_L0
0x0003       [1]    R3
0x0003       [2]    __Lib_USB_genHID_USB_CtrlTrf_Tx_Service_byteToSend_L0
0x0003       [2]    __Lib_MmcFat16_f16_toInt_l_L0
0x0003       [2]    MM_TotalFreeMemSize_Tot_L0
0x0003       [1]    MM_Init_i_L0
0x0003       [2]    memmove_tt_L0
0x0003       [1]    FLASH_Erase_Write_64_SaveINTCON_L0
0x0004       [2]    __Lib_MemManager_MM_GetMemAlign_P_L0
0x0004       [2]    memcpy_ss_L0
0x0004       [2]    __Lib_USB_genHID_USB_Get_Status_Handler_p_L2
0x0004       [1]    R4
0x0004       [2]    strncat_cp_L0
0x0004       [2]    __Lib_USB_genHID_USB_Std_Feature_Req_Handler_p_L0
0x0004       [2]    frexp_pom_L0
0x0004       [2]    strcpy_cp_L0
0x0004       [2]    __Lib_USB_genHID_USB_Transfer_Packet_handle_L0
0x0004       [2]    strcat_cp_L0
0x0004       [2]    __Lib_USB_genHID_USB_Transfer_Packet_Int_handle_L0
0x0004       [2]    strncpy_cp_L0
0x0005       [2]    memmove_ff_L0
0x0005       [1]    R5
0x0005       [1]    MM_TotalFreeMemSize_i_L0
0x0005       [2]    LongWordToHex_input_half_L0
0x0005       [2]    Ltrim_p_L0
0x0005       [2]    __Lib_USB_genHID_USB_Configure_Endpoint_handle_L0
0x0005       [2]    LongIntToHex_input_half_L0
0x0006       [1]    R6
0x0006       [1]    __Lib_MemManager_MM_GetMemAlign_i_L0
0x0007       [1]    __Lib_TFT_16bit_JPEG_GenerateHuffmanTables_bLength_L0
0x0007       [1]    __Lib_TFT_JPEG_GenerateHuffmanTables_bLength_L0
0x0007       [1]    R7
0x0008       [1]    __Lib_TFT_16bit_JPEG_GenerateHuffmanTables_bTable_L0
0x0008       [1]    R8
0x0008       [1]    __Lib_TFT_JPEG_GenerateHuffmanTables_bTable_L0
0x0009       [1]    R9
0x0009       [4]    __Lib_MmcFat16_f16_toLong_l_L0
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0015       [2]    _baseT1
0x0017       [2]    _baseT2
0x0019       [2]    _baseTMR01
0x001B       [2]    _motorControl
0x001D       [1]    _incRpm03
0x001E       [1]    _pr2Load
0x001F       [1]    _incRpm01
0x0020       [1]    _incRpm02
0x0021       [0]    _flagButton
0x0F81       [0]    RB5_bit
0x0F8A       [0]    LATB1_bit
0x0F8A       [0]    LATB3_bit
0x0F8A       [0]    LATB4_bit
0x0F8A       [0]    LATB6_bit
0x0F8A       [0]    LATB7_bit
0x0F8A       [1]    LATB
0x0F8A       [0]    LATB0_bit
0x0F93       [1]    TRISB
0x0F9E       [0]    TMR1IF_bit
0x0F9E       [0]    TMR2IF_bit
0x0FC1       [1]    ADCON1
0x0FCA       [1]    T2CON
0x0FCB       [1]    PR2
0x0FCD       [1]    T1CON
0x0FCE       [1]    TMR1L
0x0FCF       [1]    TMR1H
0x0FD5       [1]    T0CON
0x0FD6       [1]    TMR0L
0x0FD7       [1]    TMR0H
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF2       [0]    TMR0IF_bit
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
//** Label List: ** 
//----------------------------------------------
  L_main0
  L_main1
  L_checkT02
  L_baseTime3
  L_baseTime4
  L_checkT15
  L_checkT16
  L_checkT17
  L_checkT28
  L_checkT29
  L_checkT210
  L_checkT211
  L_checkT212
  L_checkT213
  L_checkT214
  L_checkT215
  L_checkT216
  L_checkT217
  L_readButton18
  L_readButton19
  L_readButton20
  L_readButton21
  L__readButton22
  L_end_main
  _main
  L_end_configureMcu
  _configureMcu
  L_end_checkT0
  _checkT0
  L_end_baseTime
  _baseTime
  L__baseTime27
  L__baseTime28
  L_end_checkT1
  _checkT1
  L__checkT130
  L__checkT131
  L_end_checkT2
  _checkT2
  L_end_readButton
  _readButton
  _CC2D_Loop1
  _CC2DL_Loop1
  L_loopCA2AWs
  L_loopCCA2AWs
  L_loopCS2Ss
  L_CS2Send
  L_loopCCS2Ss
  L_CCS2Send
  L_loopFZinSWs
  L_longjmp7
  L_end___CC2D
  ___CC2D
  L_end___CC2DW
  ___CC2DW
  L_end___CA2AW
  ___CA2AW
  L_end___CCA2AW
  ___CCA2AW
  L_end___CS2S
  ___CS2S
  L_end___CCS2S
  ___CCS2S
  L_end___FZinS
  ___FZinS
  L_end_____DoIFC
  _____DoIFC
  L_end_Swap
  _Swap
  L_end_setjmp
  _setjmp
  L_end_longjmp
  _longjmp
